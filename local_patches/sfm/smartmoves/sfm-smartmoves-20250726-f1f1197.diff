From c3badb783eac802abb27787bafe47c0efd1d1ec2 Mon Sep 17 00:00:00 2001
From: Botond Kalocsai <kalocsaibotond@gmail.com>
Date: Wed, 15 Jan 2025 21:36:47 +0100
Subject: [PATCH] [feat] apply smartmoves patch

Centralise all cursor motion to move_cursor, make visual mode vi like.
Add half and full pane scroll.
Add cursor jump commands.
Add entry number showing for cursor jump commands.
---
 config.def.h |  11 +-
 sfm.1        |  19 +++-
 sfm.c        | 279 +++++++++++++++++++++++++++++++++++++++++++++------
 sfm.h        |   9 ++
 4 files changed, 282 insertions(+), 36 deletions(-)

diff --git a/config.def.h b/config.def.h
index a955194..b2bbf3c 100644
--- a/config.def.h
+++ b/config.def.h
@@ -92,10 +92,13 @@ static Key nkeys[] = {
 	{ XK_DOWN,             move_cursor,      { .i = +1 }              },
 	{ 'k',                 move_cursor,      { .i = -1 }              },
 	{ XK_UP,               move_cursor,      { .i = -1 }              },
-	{ XK_CTRL('u'),        move_cursor,      { .i = -5 }              },
-	{ XK_CTRL('d'),        move_cursor,      { .i = +5 }              },
-	{ '{',                 move_cursor,      { .i = -10 }             },
-	{ '}',                 move_cursor,      { .i = +10 }             },
+	{ 'J',                 jump_cursor_down, { .i = +1 }              },
+	{ 'K',                 jump_cursor_up,   { .i = +1 }              },
+	{ 'M',                 jump_cursor,      { .i = +1 }              },
+	{ XK_CTRL('u'),        move_half_pane,   { .i = -1 }              },
+	{ XK_CTRL('d'),        move_half_pane,   { .i = +1 }              },
+	{ '{',                 move_full_pane,   { .i = -1 }              },
+	{ '}',                 move_full_pane,   { .i = +1 }              },
 	{ 'l',                 open_entry,       { 0 }                    },
 	{ 'h',                 cd_to_parent,     { 0 }                    },
 	{ 'q',                 quit,             { 0 }                    },
diff --git a/sfm.1 b/sfm.1
index 91dd025..12781bd 100644
--- a/sfm.1
+++ b/sfm.1
@@ -27,6 +27,15 @@ down
 .B k
 up
 .TP
+.B J
+jump cursor down
+.TP
+.B K
+jump cursor up
+.TP
+.B M
+jump cursor to
+.TP
 .B l
 open dir | file
 .TP
@@ -37,10 +46,16 @@ top
 bottom
 .TP
 .B ctrl+u
-scroll up
+scroll up half pane
 .TP
 .B ctrl+d
-scroll down
+scroll down half pane
+.TP
+.B {
+scroll up full pane
+.TP
+.B }
+scroll down full pane
 .TP
 .B ctrl+f
 create new file
diff --git a/sfm.c b/sfm.c
index 8628d00..5ccabe8 100644
--- a/sfm.c
+++ b/sfm.c
@@ -76,6 +76,7 @@ static pid_t fork_pid, main_pid;
 static char **selected_entries = NULL;
 static int selected_count = 0;
 static int mode;
+static int move_cursor_render = 1;
 
 static void
 log_to_file(const char *func, int line, const char *format, ...)
@@ -1179,12 +1180,8 @@ delete_entry(const Arg *arg)
 static void
 move_bottom(const Arg *arg)
 {
-	current_pane->current_index = current_pane->entry_count - 1;
-	current_pane->start_index = current_pane->entry_count - (term.rows - 2);
-	if (current_pane->start_index < 0) {
-		current_pane->start_index = 0;
-	}
-	update_screen();
+	move_cursor(&(Arg) { .i = current_pane->entry_count -
+			current_pane->current_index - 1 });
 }
 
 static void
@@ -1222,6 +1219,31 @@ update_entry(Pane *pane, int index)
 	write(STDOUT_FILENO, buffer, strlen(buffer));
 }
 
+static void
+render_cursor_move(const int new_start_index, const int old_index)
+{
+	if (new_start_index != current_pane->start_index) {
+		update_screen();
+		return;
+	}
+	// Update only the necessary entries
+	if (old_index == current_pane->current_index)
+		return;
+	if (mode == VisualMode) {
+		if(old_index < current_pane->current_index)
+			for (int i = old_index;
+				i <= current_pane->current_index; i++)
+				update_entry(current_pane, i);
+		else
+			for (int i = old_index;
+				i >= current_pane->current_index; i--)
+				update_entry(current_pane, i);
+	} else {
+		update_entry(current_pane, old_index);
+		update_entry(current_pane, current_pane->current_index);
+	}
+}
+
 static void
 move_cursor(const Arg *arg)
 {
@@ -1249,26 +1271,233 @@ move_cursor(const Arg *arg)
 			current_pane->current_index - (term.rows - 3);
 	}
 
-	if (new_start_index != current_pane->start_index) {
+	if (mode == VisualMode){
+		if(old_index < current_pane->current_index)
+			for (int i = old_index + 1;
+				i <= current_pane->current_index; i++)
+				select_entry(&current_pane->entries[i], Select);
+		else if(old_index > current_pane->current_index)
+			for (int i = old_index - 1;
+				i >= current_pane->current_index; i--)
+				select_entry(&current_pane->entries[i], Select);
+	}
+	if (move_cursor_render)
+		render_cursor_move(new_start_index, old_index);
+}
+
+static void
+show_entry_nums_down(void)
+{
+	int entry_number_len;
+	int entry_index;
+	char entry_name_tmp[NAME_MAX];
+	
+	if (current_pane->entries == NULL)
+		return;
+	for (entry_index = current_pane->start_index;
+		entry_index < current_pane->start_index + term.rows - 2 &&
+		entry_index < current_pane->entry_count;
+		entry_index++) {
+		strncpy(entry_name_tmp,
+			current_pane->entries[entry_index].name,
+			NAME_MAX
+		);
+		entry_number_len = snprintf(
+			current_pane->entries[entry_index].name, NAME_MAX,
+			"%d ", entry_index - current_pane->current_index);
+		if (0 < entry_number_len){
+			strncpy(current_pane->entries[entry_index].name +
+				entry_number_len,
+				entry_name_tmp, NAME_MAX - entry_number_len);
+			update_entry(current_pane, entry_index);
+			strncpy(current_pane->entries[entry_index].name,
+				entry_name_tmp, NAME_MAX);
+		} else {
+			strncpy(current_pane->entries[entry_index].name,
+				entry_name_tmp, NAME_MAX);
+		}
+	}
+}
+
+static void
+jump_cursor_down(const Arg *arg)
+{
+	int jump_target;
+	char jump_input[NAME_MAX];
+
+	if(0 < arg->i)
+		show_entry_nums_down();
+	if(0 != get_user_input(jump_input, NAME_MAX, "jump cursor down: "))
+		goto cancel_jump_exit;
+	jump_target = strtol(jump_input, NULL, 10);
+	
+	if(0 < arg->i){
+		move_cursor_render = 0;
+		move_cursor(&(Arg) { .i = jump_target });
+		move_cursor_render = 1;
 		update_screen();
 	} else {
-		// Update only the necessary entries
-		if (old_index != current_pane->current_index) {
-			update_entry(current_pane, old_index);
-			update_entry(current_pane, current_pane->current_index);
+		move_cursor(&(Arg) { .i = jump_target });
+		display_entry_details();
+	}
+	return;
+cancel_jump_exit:
+	if(0 < arg->i)
+		update_screen();
+	else
+		display_entry_details();
+}
+
+static void
+show_entry_nums(void)
+{
+	int entry_number_len;
+	int entry_index;
+	char entry_name_tmp[NAME_MAX];
+	
+	if (current_pane->entries == NULL)
+		return;
+	for (entry_index = current_pane->start_index;
+		entry_index < current_pane->start_index + term.rows - 2 &&
+		entry_index < current_pane->entry_count;
+		entry_index++) {
+		strncpy(entry_name_tmp,
+			current_pane->entries[entry_index].name,
+			NAME_MAX
+		);
+		entry_number_len = snprintf(
+			current_pane->entries[entry_index].name, NAME_MAX,
+			"%d ", entry_index + 1);
+		if (0 < entry_number_len){
+			strncpy(current_pane->entries[entry_index].name +
+				entry_number_len,
+				entry_name_tmp, NAME_MAX - entry_number_len);
+			update_entry(current_pane, entry_index);
+			strncpy(current_pane->entries[entry_index].name,
+				entry_name_tmp, NAME_MAX);
+		} else {
+			strncpy(current_pane->entries[entry_index].name,
+				entry_name_tmp, NAME_MAX);
 		}
 	}
+}
 
-	if (mode == VisualMode)
-		select_cur_entry(&(Arg) { .i = Select });
+static void
+jump_cursor(const Arg *arg)
+{
+	int jump_target;
+	char jump_input[NAME_MAX];
+
+	if(0 < arg->i)
+		show_entry_nums();
+	if(0 != get_user_input(jump_input, NAME_MAX, "jump cursor to: "))
+		goto cancel_jump_exit;
+	jump_target = strtol(jump_input, NULL, 10)
+		- current_pane->current_index - 1;
+	
+	if(0 < arg->i){
+		move_cursor_render = 0;
+		move_cursor(&(Arg) { .i = jump_target });
+		move_cursor_render = 1;
+		update_screen();
+	} else {
+		move_cursor(&(Arg) { .i = jump_target });
+		display_entry_details();
+	}
+	return;
+cancel_jump_exit:
+	if(0 < arg->i)
+		update_screen();
+	else
+		display_entry_details();
+}
+
+static void
+show_entry_nums_up(void)
+{
+	int entry_number_len;
+	int entry_index;
+	char entry_name_tmp[NAME_MAX];
+	
+	if (current_pane->entries == NULL)
+		return;
+	for (entry_index = current_pane->start_index;
+		entry_index < current_pane->start_index + term.rows - 2 &&
+		entry_index < current_pane->entry_count;
+		entry_index++) {
+		strncpy(entry_name_tmp,
+			current_pane->entries[entry_index].name,
+			NAME_MAX
+		);
+		entry_number_len = snprintf(
+			current_pane->entries[entry_index].name, NAME_MAX,
+			"%d ", current_pane->current_index - entry_index);
+		if (0 < entry_number_len){
+			strncpy(current_pane->entries[entry_index].name +
+				entry_number_len,
+				entry_name_tmp, NAME_MAX - entry_number_len);
+			update_entry(current_pane, entry_index);
+			strncpy(current_pane->entries[entry_index].name,
+				entry_name_tmp, NAME_MAX);
+		} else {
+			strncpy(current_pane->entries[entry_index].name,
+				entry_name_tmp, NAME_MAX);
+		}
+	}
 }
 
+static void
+jump_cursor_up(const Arg *arg)
+{
+	int jump_target;
+	char jump_input[NAME_MAX];
+
+	if(0 < arg->i)
+		show_entry_nums_up();
+	if(0 != get_user_input(jump_input, NAME_MAX, "jump cursor up: "))
+		goto cancel_jump_exit;
+	jump_target = -strtol(jump_input, NULL, 10);
+	
+	if(0 < arg->i){
+		move_cursor_render = 0;
+		move_cursor(&(Arg) { .i = jump_target });
+		move_cursor_render = 1;
+		update_screen();
+	} else {
+		move_cursor(&(Arg) { .i = jump_target });
+		display_entry_details();
+	}
+	return;
+cancel_jump_exit:
+	if(0 < arg->i)
+		update_screen();
+	else
+		display_entry_details();
+}
+
+static void
+move_half_pane(const Arg *arg)
+{
+	if(0 < arg->i)
+		move_cursor(&(Arg) { .i = (term.rows - 2) / 2 });
+	else
+		move_cursor(&(Arg) { .i = -(term.rows - 2) / 2 });
+}
+
+static void
+move_full_pane(const Arg *arg)
+{
+	if(0 < arg->i)
+		move_cursor(&(Arg) { .i = (term.rows - 2) });
+	else
+		move_cursor(&(Arg) { .i = -(term.rows - 2) });
+}
+
+
 static void
 move_top(const Arg *arg)
 {
-	current_pane->current_index = 0;
-	current_pane->start_index = 0;
-	update_screen();
+	move_cursor(&(Arg) { .i = -current_pane->current_index });
 }
 
 static void
@@ -1828,20 +2057,10 @@ move_to_match(const Arg *arg)
 			current_pane->matched_count;
 	}
 
-	current_pane->current_index =
-		current_pane->matched_indices[current_pane->current_match];
-
-	if (current_pane->current_index < current_pane->start_index ||
-		current_pane->current_index >=
-			current_pane->start_index + term.rows - 2) {
-		current_pane->start_index =
-			current_pane->current_index - (term.rows - 2) / 2;
-		if (current_pane->start_index < 0) {
-			current_pane->start_index = 0;
-		}
-	}
-
-	update_screen();
+	move_cursor(&(Arg) {
+		.i = current_pane
+				->matched_indices[current_pane->current_match] -
+			current_pane->current_index });
 }
 
 int
diff --git a/sfm.h b/sfm.h
index f38767c..0f4c6ea 100644
--- a/sfm.h
+++ b/sfm.h
@@ -199,7 +199,16 @@ static void create_new_dir(const Arg *);
 static void copy_entries(const Arg *);
 static void delete_entry(const Arg *);
 static void move_bottom(const Arg *);
+static void render_cursor_move(const int, const int);
 static void move_cursor(const Arg *);
+static void show_entry_nums_down(void);
+static void jump_cursor_down(const Arg *);
+static void show_entry_nums(void);
+static void jump_cursor(const Arg *);
+static void show_entry_nums_up(void);
+static void jump_cursor_up(const Arg *);
+static void move_half_pane(const Arg *);
+static void move_full_pane(const Arg *);
 static void move_top(const Arg *);
 static void move_entries(const Arg *);
 static void open_entry(const Arg *);
-- 
2.50.0.windows.2

